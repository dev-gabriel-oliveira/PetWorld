---------------------- CREATE TABLES ------------------------

CREATE TABLE CLIENTE(
	COD SERIAL PRIMARY KEY,
	CPF VARCHAR(50) NOT NULL UNIQUE,
	NOME VARCHAR(150) NOT NULL,
	FONE VARCHAR(50)
);

CREATE TABLE ANIMAL(
	COD SERIAL PRIMARY KEY,
	NOME VARCHAR(150) NOT NULL,
	DT_NASC DATE,
	DESCRICAO TEXT,
	COD_CLIENTE INT REFERENCES CLIENTE(COD)
		ON UPDATE CASCADE
		ON DELETE CASCADE
);


CREATE TABLE CARGO(
	COD SERIAL PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL UNIQUE,
	SALARIO NUMERIC(8,2) NOT NULL
);

CREATE TABLE FUNCIONARIO(
	COD SERIAL PRIMARY KEY,
	CPF VARCHAR(50) NOT NULL UNIQUE,
	NOME VARCHAR(150) NOT NULL,
	FONE VARCHAR(50) NOT NULL,
	CONTA VARCHAR(50) NOT NULL,
	COD_CARGO INT REFERENCES CARGO(COD)
		ON UPDATE CASCADE
		ON DELETE RESTRICT
);


CREATE TABLE VENDA(
	COD SERIAL PRIMARY KEY,
	DT_HORA TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	COD_FUNC INT REFERENCES FUNCIONARIO(COD)
		ON UPDATE CASCADE
		ON DELETE SET NULL,
	COD_CLIENTE INT REFERENCES CLIENTE(COD)
		ON UPDATE CASCADE
		ON DELETE RESTRICT,
	VALOR NUMERIC(8,2),
	PAGO BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE PRODUTO(
	COD SERIAL PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL UNIQUE,
	VALOR NUMERIC(8,2) NOT NULL,
	ESTOQUE INT NOT NULL
);

CREATE TABLE ITEM_VENDA(
	COD SERIAL PRIMARY KEY,
	COD_VENDA INT REFERENCES VENDA(COD)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	COD_PRODUTO INT REFERENCES PRODUTO(COD)
		ON UPDATE CASCADE
		ON DELETE SET NULL,
	QNTD INT NOT NULL,
	VALOR NUMERIC(8,2) NOT NULL
);


CREATE TABLE TIPO_SERVICO(
	COD SERIAL PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL UNIQUE,
	VALOR NUMERIC(8,2) NOT NULL
);

CREATE TABLE SERVICO(
	COD SERIAL PRIMARY KEY,
	DT_HORA TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	COD_TIPO INT REFERENCES TIPO_SERVICO(COD)
		ON UPDATE CASCADE
		ON DELETE SET NULL,
	COD_FUNC INT REFERENCES FUNCIONARIO(COD)
		ON UPDATE CASCADE
		ON DELETE SET NULL,
	COD_ANIMAL INT REFERENCES ANIMAL(COD)
		ON UPDATE CASCADE
		ON DELETE RESTRICT,
	VALOR NUMERIC(8,2) NOT NULL,
	PAGO BOOLEAN NOT NULL DEFAULT FALSE
);

---------------------- LOG DO SISTEMA ------------------------

CREATE TABLE LOG_SISTEMA (
	COD SERIAL PRIMARY KEY,
	USUARIO NAME,
	DT_HORA TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	TABELA VARCHAR(100),
	OPERACAO TEXT
);

CREATE OR REPLACE FUNCTION PROCESSA_AUDIT()
RETURNS TRIGGER AS
$$
BEGIN
	IF (TG_OP ILIKE 'INSERT') THEN
		INSERT INTO LOG_SISTEMA (USUARIO, TABELA, OPERACAO)
		VALUES (CURRENT_USER, TG_TABLE_NAME, 'INSERT -> COD '|| NEW.COD ||'');
		RETURN NEW;
	ELSIF (TG_OP ILIKE 'UPDATE') THEN
		INSERT INTO LOG_SISTEMA (USUARIO, TABELA, OPERACAO)
		VALUES (CURRENT_USER, TG_TABLE_NAME, 'UPDATE -> COD '|| NEW.COD ||' -> Valores '|| OLD ||' atualizados com '|| NEW.* ||'');
		RETURN NEW;
	ELSIF (TG_OP ILIKE 'DELETE') THEN
		INSERT INTO LOG_SISTEMA (USUARIO, TABELA, OPERACAO)
		VALUES (CURRENT_USER, TG_TABLE_NAME, 'DELETE -> COD '|| OLD.COD ||'');
		RETURN OLD;
	END IF;
	
	RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER AUDIT
AFTER INSERT OR UPDATE OR DELETE
ON CLIENTE
FOR EACH ROW
EXECUTE PROCEDURE PROCESSA_AUDIT();

CREATE TRIGGER AUDIT
AFTER INSERT OR UPDATE OR DELETE
ON ANIMAL
FOR EACH ROW
EXECUTE PROCEDURE PROCESSA_AUDIT();

CREATE TRIGGER AUDIT
AFTER INSERT OR UPDATE OR DELETE
ON PRODUTO
FOR EACH ROW
EXECUTE PROCEDURE PROCESSA_AUDIT();

CREATE TRIGGER AUDIT
AFTER INSERT OR UPDATE OR DELETE
ON CARGO
FOR EACH ROW
EXECUTE PROCEDURE PROCESSA_AUDIT();

CREATE TRIGGER AUDIT
AFTER INSERT OR UPDATE OR DELETE
ON TIPO_SERVICO
FOR EACH ROW
EXECUTE PROCEDURE PROCESSA_AUDIT();

CREATE TRIGGER AUDIT
AFTER INSERT OR UPDATE OR DELETE
ON ITEM_VENDA
FOR EACH ROW
EXECUTE PROCEDURE PROCESSA_AUDIT();

CREATE TRIGGER AUDIT
AFTER INSERT OR UPDATE OR DELETE
ON VENDA
FOR EACH ROW
EXECUTE PROCEDURE PROCESSA_AUDIT();

CREATE TRIGGER AUDIT
AFTER INSERT OR UPDATE OR DELETE
ON SERVICO
FOR EACH ROW
EXECUTE PROCEDURE PROCESSA_AUDIT();

---------------------- INSERT FUNCTIONS ------------------------

CREATE OR REPLACE FUNCTION ADD_CLIENTE(
	CPF_C VARCHAR(50),
	NOME_C VARCHAR(150),
	FONE_C VARCHAR(50)
)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM CLIENTE WHERE CPF = CPF_C) THEN
		INSERT INTO CLIENTE (CPF, NOME, FONE) VALUES (CPF_C, NOME_C, FONE_C);
	ELSE
		RAISE EXCEPTION 'O CLIENTE JÁ EXISTE!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ADD_ANIMAL(
	NOME_A VARCHAR(150),
	DT_NASC_A DATE,
	DESCRICAO_A TEXT,
	CPF_C VARCHAR(50)
)
RETURNS VOID AS $$
DECLARE
	COD_C INT;
BEGIN
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF = CPF_C;
	
	IF EXISTS (SELECT * FROM CLIENTE WHERE CPF = CPF_C) THEN
		IF NOT EXISTS (SELECT * FROM ANIMAL ANI JOIN CLIENTE CLI ON CLI.COD = ANI.COD_CLIENTE WHERE ANI.NOME ILIKE NOME_A) THEN
			INSERT INTO ANIMAL (NOME, DT_NASC, DESCRICAO, COD_CLIENTE) VALUES (NOME_A, DT_NASC_A, DESCRICAO_A, COD_C);
		ELSE
			RAISE EXCEPTION 'O ANIMAL JÁ EXISTE!';
		END IF;
	ELSE
		RAISE EXCEPTION 'CLIENTE NÃO ENCONTRADO!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ADD_CARGO(
	NOME_CAR VARCHAR(100),
	SALARIO_CAR NUMERIC(8,2)
)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM CARGO WHERE NOME ILIKE NOME_CAR) THEN
		INSERT INTO CARGO (NOME, SALARIO) VALUES (NOME_CAR, SALARIO_CAR);
	ELSE
		RAISE EXCEPTION 'O CARGO JÁ EXISTE!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ADD_FUNC(
	CPF_F VARCHAR(50),
	NOME_F VARCHAR(150),
	FONE_F VARCHAR(50),
	CONTA_F VARCHAR(50),
	NOME_CAR VARCHAR(100)
)
RETURNS VOID AS $$
DECLARE
	COD_CAR INT;
BEGIN
	IF NOT EXISTS (SELECT * FROM FUNCIONARIO WHERE CPF = CPF_F) THEN
		IF EXISTS (SELECT * FROM CARGO WHERE NOME ILIKE NOME_CAR) THEN
			SELECT COD INTO COD_CAR FROM CARGO WHERE NOME ILIKE NOME_CAR;
			INSERT INTO FUNCIONARIO (CPF, NOME, FONE, CONTA, COD_CARGO) VALUES (CPF_F, NOME_F, FONE_F, CONTA_F, COD_CAR);
		ELSE
			RAISE EXCEPTION 'CARGO INEXISTENTE!';
		END IF;
	ELSE
		RAISE EXCEPTION 'O FUNCIONÁRIO JÁ EXISTE!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ADD_PRODUTO (
	NOME_P VARCHAR(100),
	VALOR_P NUMERIC(8,2),
	ESTOQUE_P INT
)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM PRODUTO WHERE NOME ILIKE NOME_P) THEN
		INSERT INTO PRODUTO(NOME, VALOR, ESTOQUE) VALUES (NOME_P, VALOR_P, ESTOQUE_P);
	ELSE
		RAISE EXCEPTION 'O PRODUTO JÁ EXISTE!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ADD_TIPO_SERV(
	NOME_TS VARCHAR(100),
	VALOR_TS NUMERIC(8,2)
)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM TIPO_SERVICO WHERE NOME ILIKE NOME_TS) THEN
		INSERT INTO TIPO_SERVICO (NOME, VALOR) VALUES (NOME_TS, VALOR_TS);
	ELSE
		RAISE EXCEPTION 'O TIPO DE SERVIÇO JÁ EXISTE!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

---------------------- UPDATE FUNCTIONS ------------------------

CREATE OR REPLACE FUNCTION ALTER_CLIENTE(
	COD_C INT,
	CPF_C VARCHAR(50) DEFAULT NULL,
	NOME_C VARCHAR(150) DEFAULT NULL,
	FONE_C VARCHAR(50) DEFAULT NULL
)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM CLIENTE WHERE COD = COD_C) THEN
		RAISE EXCEPTION 'CLIENTE NÃO ENCONTRADO!';
	ELSE
		IF CPF_C IS NOT NULL THEN
			UPDATE CLIENTE
			SET CPF = CPF_C
			WHERE COD = COD_C;
		END IF;
		
		IF NOME_C IS NOT NULL THEN
			UPDATE CLIENTE
			SET NOME = NOME_C
			WHERE COD = COD_C;
		END IF;
		
		IF FONE_C IS NOT NULL THEN
			UPDATE CLIENTE
			SET FONE = FONE_C
			WHERE COD = COD_C;
		END IF;
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ALTER_ANIMAL(
	COD_A INT,
	NOME_A VARCHAR(150) DEFAULT NULL, 
	DT_NASC_A DATE DEFAULT NULL,
	DESCRICAO_A TEXT DEFAULT NULL,
	CPF_C VARCHAR(50) DEFAULT NULL
)
RETURNS VOID AS $$
DECLARE
	COD_C INT;
BEGIN
	IF NOT EXISTS (SELECT * FROM ANIMAL WHERE COD = COD_A) THEN
		RAISE EXCEPTION 'ANIMAL NÃO ENCONTRADO!';
	ELSE
		IF NOME_A IS NOT NULL THEN
			UPDATE ANIMAL
			SET NOME = NOME_A
			WHERE COD = COD_A;
		END IF;

		IF DT_NASC_A IS NOT NULL THEN
			UPDATE ANIMAL
			SET DT_NASC = DT_NASC_A
			WHERE COD = COD_A;
		END IF;

		IF DESCRICAO_A IS NOT NULL THEN
			UPDATE ANIMAL
			SET DESCRICAO = DESCRICAO_A
			WHERE COD = COD_A;
		END IF;

		IF CPF_C IS NOT NULL THEN
			SELECT COD INTO COD_C FROM CLIENTE WHERE CPF = CPF_C;
			
			IF EXISTS (SELECT * FROM CLIENTE WHERE COD = COD_C) THEN
				UPDATE ANIMAL
				SET COD_CLIENTE = COD_C
				WHERE COD = COD_A;
			ELSE
				RAISE EXCEPTION 'CLIENTE NÃO ENCONTRADO!';
			END IF;
		END IF;
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ALTER_CARGO (
	COD_CAR INT,
	NOME_CAR VARCHAR(100) DEFAULT NULL,
	SALARIO_CAR NUMERIC(8,2) DEFAULT NULL
)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM CARGO WHERE COD = COD_CAR) THEN
		RAISE EXCEPTION 'CARGO NÃO ENCONTRADO';
	ELSE
		IF NOME_CAR IS NOT NULL THEN
			UPDATE CARGO
			SET NOME = NOME_CAR
			WHERE COD = COD_CAR;
		END IF;
		
		IF SALARIO_CAR IS NOT NULL THEN
			UPDATE CARGO
			SET SALARIO = SALARIO_CAR
			WHERE COD = COD_CAR;
		END IF;
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ALTER_FUNC(
	COD_F INT,
	CPF_F VARCHAR(50) DEFAULT NULL,
	NOME_F VARCHAR(150) DEFAULT NULL,
	FONE_F VARCHAR(50) DEFAULT NULL,
	CONTA_F VARCHAR(50) DEFAULT NULL,
	NOME_CAR VARCHAR(100) DEFAULT NULL
)
RETURNS VOID AS $$
DECLARE
	COD_CAR INT;
BEGIN
	IF NOT EXISTS (SELECT * FROM FUNCIONARIO WHERE COD = COD_F) THEN
		RAISE EXCEPTION 'FUNCIONÁRIO NÃO ENCONTRADO';
	ELSE
		IF CPF_F IS NOT NULL THEN
			UPDATE FUNCIONARIO
			SET CPF = CPF_F
			WHERE COD = COD_F;
		END IF;

		IF NOME_F IS NOT NULL THEN
			UPDATE FUNCIONARIO
			SET NOME = NOME_F
			WHERE COD = COD_F;
		END IF;

		IF FONE_F IS NOT NULL THEN
			UPDATE FUNCIONARIO
			SET FONE = FONE_F
			WHERE COD = COD_F;
		END IF;

		IF CONTA_F IS NOT NULL THEN
			UPDATE FUNCIONARIO
			SET CONTA = CONTA_F
			WHERE COD = COD_F;
		END IF;

		IF NOME_CAR IS NOT NULL THEN
			SELECT COD INTO COD_CAR FROM CARGO WHERE NOME ILIKE NOME_CAR;
			
			IF EXISTS (SELECT * FROM CARGO WHERE COD = COD_CAR) THEN
				UPDATE FUNCIONARIO
				SET COD_CARGO = COD_CAR
				WHERE COD = COD_F;
			ELSE
				RAISE EXCEPTION 'CARGO INEXISTENTE!';
			END IF;
		END IF;
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ALTER_PRODUTO (
	COD_P INT,
	NOME_P VARCHAR(100) DEFAULT NULL,
	VALOR_P NUMERIC(8,2) DEFAULT NULL,
	ESTOQUE_P INT DEFAULT NULL
)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM PRODUTO WHERE COD = COD_P) THEN
		RAISE EXCEPTION 'PRODUTO NÃO ENCONTRADO';
	ELSE
		IF NOME_P IS NOT NULL THEN
			UPDATE PRODUTO
			SET NOME = NOME_P
			WHERE COD = COD_P;
		END IF;
		
		IF VALOR_P IS NOT NULL THEN
			UPDATE PRODUTO
			SET VALOR = VALOR_P
			WHERE COD = COD_P;
		END IF;
		
		IF ESTOQUE_P IS NOT NULL THEN
			UPDATE PRODUTO
			SET ESTOQUE = ESTOQUE_P
			WHERE COD = COD_P;
		END IF;
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION ALTER_TIPO_SERV (
	COD_TS INT,
	NOME_TS VARCHAR(100) DEFAULT NULL,
	VALOR_TS NUMERIC(8,2) DEFAULT NULL
)
RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT * FROM TIPO_SERVICO WHERE COD = COD_TS) THEN
		RAISE EXCEPTION 'TIPO DE SERVIÇO NÃO ENCONTRADO!';
	ELSE
		IF NOME_TS IS NOT NULL THEN
			UPDATE TIPO_SERVICO
			SET NOME = NOME_TS
			WHERE COD = COD_TS;
		END IF;
		
		IF VALOR_TS IS NOT NULL THEN
			UPDATE TIPO_SERVICO
			SET VALOR = VALOR_TS
			WHERE COD = COD_TS;
		END IF;
	END IF;
END;
$$
LANGUAGE 'plpgsql';

---------------------- DELETE FUNCTIONS ------------------------

CREATE OR REPLACE FUNCTION DELETE_CLIENTE (COD_C INT)
RETURNS VOID AS $$
BEGIN
	IF EXISTS (SELECT * FROM CLIENTE WHERE COD = COD_C) THEN
		DELETE FROM CLIENTE WHERE COD = COD_C;
	ELSE
		RAISE EXCEPTION 'CLIENTE NÃO ENCONTRADO!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION DELETE_ANIMAL (COD_A INT)
RETURNS VOID AS $$
BEGIN
	IF EXISTS (SELECT * FROM ANIMAL WHERE COD = COD_A) THEN
		DELETE FROM ANIMAL WHERE COD = COD_A;
	ELSE
		RAISE EXCEPTION 'ANIMAL NÃO ENCONTRADO!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION DELETE_CARGO (COD_CAR INT)
RETURNS VOID AS $$
BEGIN
	IF EXISTS (SELECT * FROM CARGO WHERE COD = COD_CAR) THEN
		DELETE FROM CARGO WHERE COD = COD_CAR;
	ELSE
		RAISE EXCEPTION 'CARGO NÃO ENCONTRADO!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION DELETE_FUNCIONARIO (COD_F INT)
RETURNS VOID AS $$
BEGIN
	IF EXISTS (SELECT * FROM FUNCIONARIO WHERE COD = COD_F) THEN
		DELETE FROM FUNCIONARIO WHERE COD = COD_F;
	ELSE
		RAISE EXCEPTION 'FUNCIONÁRIO NÃO ENCONTRADO!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION DELETE_PRODUTO (COD_P INT)
RETURNS VOID AS $$
BEGIN
	IF EXISTS (SELECT * FROM PRODUTO WHERE COD = COD_P) THEN
		DELETE FROM PRODUTO WHERE COD = COD_P;
	ELSE
		RAISE EXCEPTION 'PRODUTO NÃO ENCONTRADO!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION DELETE_TIPO_SERV (COD_TS INT)
RETURNS VOID AS $$
BEGIN
	IF EXISTS (SELECT * FROM TIPO_SERVICO WHERE COD = COD_TS) THEN
		DELETE FROM TIPO_SERVICO WHERE COD = COD_TS;
	ELSE
		RAISE EXCEPTION 'TIPO DE SERVIÇO NÃO ENCONTRADO!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

---------------------- FUNÇÃO ADICIONAR ------------------------

    --CARGO E TIPO_SERV
CREATE OR REPLACE FUNCTION ADICIONAR (
	TABELA VARCHAR(50),
	NOME VARCHAR(100),
	VALOR NUMERIC(8,2)
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		PERFORM ADD_CARGO(NOME, VALOR);
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		PERFORM ADD_TIPO_SERV(NOME, VALOR);
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

    --CLIENTE
CREATE OR REPLACE FUNCTION ADICIONAR (
	TABELA VARCHAR(50),
	CPF VARCHAR(50),
	NOME VARCHAR(150),
	FONE VARCHAR(50)
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		PERFORM ADD_CLIENTE(CPF, NOME, FONE);
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

    --PRODUTO
CREATE OR REPLACE FUNCTION ADICIONAR (
	TABELA VARCHAR(50),
	NOME VARCHAR(100),
	VALOR NUMERIC(8,2),
	ESTOQUE INT
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		PERFORM ADD_PRODUTO(NOME, VALOR, ESTOQUE);
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

    --ANIMAL
CREATE OR REPLACE FUNCTION ADICIONAR (
	TABELA VARCHAR(50),
	NOME VARCHAR(150),
	DT_NASC DATE,
	DESCRICAO TEXT,
	CPF VARCHAR(50)
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		PERFORM ADD_ANIMAL(NOME, DT_NASC, DESCRICAO, CPF);
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

    --FUNCIONARIO
CREATE OR REPLACE FUNCTION ADICIONAR (
	TABELA VARCHAR(50),
	CPF VARCHAR(50),
	NOME VARCHAR(150),
	FONE VARCHAR(50),
	CONTA VARCHAR(50),
	NOME_CARGO VARCHAR(100)
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		PERFORM ADD_FUNC(CPF, NOME, FONE, CONTA, NOME_CARGO);
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

---------------------- FUNÇÃO ALTERAR ------------------------

    --CARGO E TIPO_SERV
CREATE OR REPLACE FUNCTION ALTERAR (
	TABELA VARCHAR(50),
	COD INT,
	NOME VARCHAR(100),
	VALOR NUMERIC(8,2)
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		IF (NOME IS NOT NULL OR VALOR IS NOT NULL) THEN
			PERFORM ALTER_CARGO(COD, NOME, VALOR);
		ELSE
            RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
        END IF;
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		IF (NOME IS NOT NULL OR VALOR IS NOT NULL) THEN
			PERFORM ALTER_TIPO_SERV(COD, NOME, VALOR);
		ELSE
            RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
        END IF;
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

    --CLIENTE
CREATE OR REPLACE FUNCTION ALTERAR (
	TABELA VARCHAR(50),
	COD INT,
	CPF VARCHAR(50),
	NOME VARCHAR(150),
	FONE VARCHAR(50)
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		IF (CPF IS NOT NULL OR NOME IS NOT NULL OR FONE IS NOT NULL) THEN
			PERFORM ALTER_CLIENTE(COD, CPF, NOME, FONE);
		ELSE
            RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
        END IF;
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

    --PRODUTO
CREATE OR REPLACE FUNCTION ALTERAR (
	TABELA VARCHAR(50),
	COD INT,
	NOME VARCHAR(100),
	VALOR NUMERIC(8,2),
	ESTOQUE INT
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		IF (NOME IS NOT NULL OR VALOR IS NOT NULL OR ESTOQUE IS NOT NULL) THEN
			PERFORM ALTER_PRODUTO(COD, NOME, VALOR, ESTOQUE);
		ELSE
            RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
        END IF;
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

    --ANIMAL
CREATE OR REPLACE FUNCTION ALTERAR (
	TABELA VARCHAR(50),
	COD INT,
	NOME VARCHAR(150),
	DT_NASC DATE,
	DESCRICAO TEXT,
	CPF VARCHAR(50)
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		IF (NOME IS NOT NULL OR DT_NASC IS NOT NULL OR DESCRICAO IS NOT NULL OR CPF IS NOT NULL) THEN
			PERFORM ALTER_ANIMAL(COD, NOME, DT_NASC, DESCRICAO, CPF);
		ELSE
            RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
        END IF;
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

    --FUNCIONARIO
CREATE OR REPLACE FUNCTION ALTERAR (
	TABELA VARCHAR(50),
	COD INT,
	CPF VARCHAR(50),
	NOME VARCHAR(150),
	FONE VARCHAR(50),
	CONTA VARCHAR(50),
	NOME_CARGO VARCHAR(100)
)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		IF (CPF IS NOT NULL OR NOME IS NOT NULL OR FONE IS NOT NULL OR CONTA IS NOT NULL OR NOME_CARGO IS NOT NULL) THEN
			PERFORM ALTER_FUNC(COD, CPF, NOME, FONE, CONTA, NOME_CARGO);
		ELSE
            RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
        END IF;
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		RAISE EXCEPTION 'PARÂMETROS INCORRETOS!';
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

---------------------- FUNÇÃO DELETAR ------------------------

CREATE OR REPLACE FUNCTION DELETAR (TABELA VARCHAR(50), COD INT)
RETURNS VOID AS $$
BEGIN
	IF (TABELA ILIKE 'CLIENTE') THEN
		PERFORM DELETE_CLIENTE(COD);
		
	ELSIF (TABELA ILIKE 'ANIMAL') THEN
		PERFORM DELETE_ANIMAL(COD);
		
	ELSIF (TABELA ILIKE 'CARGO') THEN
		PERFORM DELETE_CARGO(COD);
		
	ELSIF (TABELA ILIKE 'FUNCIONARIO') THEN
		PERFORM DELETE_FUNCIONARIO(COD);
	
	ELSIF (TABELA ILIKE 'PRODUTO') THEN
		PERFORM DELETE_PRODUTO(COD);
	
	ELSIF (TABELA ILIKE 'TIPO SERVICO') THEN
		PERFORM DELETE_TIPO_SERV(COD);
	
	ELSE
		RAISE EXCEPTION 'TABELA NÃO ENCONTRADA!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

---------------------- VIEWS ------------------------
--
CREATE OR REPLACE VIEW VER_VENDAS AS
	SELECT V.COD as venda, PROD.NOME as produto, IV.QNTD as quantidade, (IV.VALOR / IV.QNTD) as valor_unitario, 
		CLI.NOME as cliente, IV.VALOR as valor_total,
		TO_CHAR(V.DT_HORA, 'dd/mm/yyyy')::VARCHAR(10) as dia, 
		TO_CHAR(V.DT_HORA, 'hh24:mi:ss')::VARCHAR(8) as hora, V.PAGO as pago, FUNC.NOME as funcionario
	FROM ITEM_VENDA IV
		JOIN PRODUTO PROD ON IV.COD_PRODUTO = PROD.COD
		JOIN VENDA V ON IV.COD_VENDA = V.COD
		JOIN CLIENTE CLI ON V.COD_CLIENTE = CLI.COD
		JOIN FUNCIONARIO FUNC ON V.COD_FUNC = FUNC.COD
	ORDER BY V.COD DESC;

CREATE OR REPLACE VIEW VER_SERVICOS AS
	SELECT S.COD as servico, TS.NOME as tipo_servico, S.VALOR as valor_servico, ANI.NOME as animal, CLI.NOME as cliente,
			TO_CHAR(S.DT_HORA, 'dd/mm/yyyy')::VARCHAR(10) as dia, 
			TO_CHAR(S.DT_HORA, 'hh24:mi:ss')::VARCHAR(8) as hora, S.PAGO as pago, FUNC.NOME as funcionario
	FROM SERVICO S
		JOIN TIPO_SERVICO TS ON S.COD_TIPO = TS.COD
		JOIN ANIMAL ANI ON S.COD_ANIMAL = ANI.COD
		JOIN CLIENTE CLI ON ANI.COD_CLIENTE = CLI.COD
		JOIN FUNCIONARIO FUNC ON S.COD_FUNC = FUNC.COD
	ORDER BY S.COD DESC;

CREATE OR REPLACE VIEW VER_ANIMAIS AS
	SELECT ANI.NOME as nome_animal, ANI.DT_NASC as dt_nasc, ANI.DESCRICAO as descricao,
	CLI.NOME as nome_cliente, CLI.CPF as cpf_cliente
	FROM ANIMAL ANI
		JOIN CLIENTE CLI ON CLI.COD = ANI.COD_CLIENTE
	ORDER BY CLI.CPF;

CREATE OR REPLACE VIEW VER_FUNCIONARIOS AS
	SELECT FUNC.NOME as nome, FUNC.CPF as cpf, FUNC.FONE as telefone,
		FUNC.CONTA as conta, CAR.NOME as cargo, CAR.SALARIO as salario
	FROM FUNCIONARIO FUNC
		JOIN CARGO CAR ON FUNC.COD_CARGO = CAR.COD
	ORDER BY CAR.NOME;
--
---------------------- VENDAS ------------------------

CREATE OR REPLACE FUNCTION ADD_VENDA(CPF_C VARCHAR(50), NOME_P VARCHAR(100), QNTD_V INT, CPF_F VARCHAR(50))
RETURNS VOID
AS $$
DECLARE
	COD_V INT;
	COD_C INT;
	COD_P INT;
	COD_F INT;
	VALOR_U NUMERIC(8,2);
	QNTD_E INT;
BEGIN
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF = CPF_C;
	SELECT COD INTO COD_V FROM VENDA WHERE COD_CLIENTE = COD_C AND PAGO = FALSE;
	SELECT COD INTO COD_F FROM FUNCIONARIO WHERE CPF = CPF_F;
	SELECT COD INTO COD_P FROM PRODUTO WHERE NOME = NOME_P;
	
	SELECT VALOR INTO VALOR_U FROM PRODUTO WHERE COD = COD_P;
	SELECT ESTOQUE INTO QNTD_E FROM PRODUTO WHERE COD = COD_P;

	IF EXISTS (SELECT * FROM FUNCIONARIO F JOIN CARGO CAR ON CAR.COD = F.COD_CARGO WHERE F.COD = COD_F AND CAR.NOME ILIKE 'ATENDENTE') THEN
		IF (QNTD_E >= QNTD_V) THEN		
			IF EXISTS (SELECT * FROM VENDA WHERE COD = COD_V) THEN
				IF NOT EXISTS (SELECT * FROM VENDA WHERE COD = COD_V AND COD_CLIENTE = COD_C AND COD_FUNC = COD_F) THEN
					RAISE EXCEPTION 'A VENDA nº% JÁ EXISTE, PORÉM OS DADOS CLIENTE/FUNCIONÁRIO NÃO CORRESPONDEM', COD_V;
				ELSIF EXISTS (SELECT * FROM ITEM_VENDA WHERE COD_VENDA = COD_V AND COD_PRODUTO = COD_P) THEN
					UPDATE ITEM_VENDA
						SET QNTD = QNTD + QNTD_V, VALOR = VALOR + (VALOR_U * QNTD_V)
						WHERE COD_VENDA = COD_V AND COD_PRODUTO = COD_P;
					RAISE INFO 'VENDA ATUALIZADA COM SUCESSO!';
				ELSE
					INSERT INTO ITEM_VENDA (COD_VENDA, COD_PRODUTO, QNTD, VALOR)
						VALUES (COD_V, COD_P, QNTD_V, (VALOR_U * QNTD_V));
					RAISE INFO 'VENDA ADICIONADA COM SUCESSO!';
				END IF;
				UPDATE VENDA SET VALOR = VALOR + (VALOR_U * QNTD_V) WHERE COD = COD_V;
			ELSE
				--Cria a venda caso ainda não exista
				INSERT INTO VENDA (COD_FUNC, COD_CLIENTE, VALOR)
					VALUES (COD_F, COD_C, (VALOR_U * QNTD_V))
					RETURNING COD INTO COD_V;

				--Adiciona o item da venda
				INSERT INTO ITEM_VENDA (COD_VENDA, COD_PRODUTO, QNTD, VALOR)
					VALUES (COD_V, COD_P, QNTD_V, (VALOR_U * QNTD_V));
				RAISE INFO 'VENDA CRIADA COM SUCESSO!';
			END IF;
			UPDATE PRODUTO SET ESTOQUE = ESTOQUE - QNTD_V WHERE COD = COD_P;
		ELSE
			RAISE EXCEPTION 'QUANTIDADE EM ESTOQUE INSUFICIENTE!';
		END IF;
	ELSIF EXISTS (SELECT * FROM FUNCIONARIO F JOIN CARGO CAR ON CAR.COD = F.COD_CARGO WHERE F.COD = COD_F AND CAR.NOME != 'ATENDENTE') THEN
		RAISE EXCEPTION 'O FUNCIONÁRIO NÃO PERTENCE AO SETOR!';
	ELSE 
		RAISE EXCEPTION 'FUNCIONÁRIO NÃO EXISTE!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION FINALIZAR_VENDA(CPF_C VARCHAR(50))
RETURNS VOID
AS $$
DECLARE
	COD_V INT;
	COD_C INT;
BEGIN
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF = CPF_C;
	SELECT COD INTO COD_V FROM VENDA WHERE COD_CLIENTE = COD_C AND PAGO = FALSE;
	
	IF EXISTS(SELECT * FROM VENDA WHERE COD = COD_V AND PAGO = FALSE)THEN
		UPDATE VENDA SET PAGO = TRUE WHERE COD = COD_V;
		RAISE INFO 'VENDA FINALIZADA COM SUCESSO!';
	ELSE
		RAISE EXCEPTION 'O CLIENTE NÃO POSSUI NENHUMA VENDA EM ABERTO!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION GERAR_NOTA_VENDA_ABERTA(CPF_C VARCHAR(50))
RETURNS TABLE(
	venda int,
	nome_produto varchar(100),
	quantidade int,
	valor_unitario numeric(8, 2),
	nome_cliente varchar(100),
	valor_total numeric(8, 2),
	dia varchar(10),
	hora varchar(10),
	nome_funcionario varchar(100)
)
AS $$
DECLARE
	COD_C INT;
	COD_V INT;
BEGIN
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF = CPF_C;
	SELECT V.COD INTO COD_V FROM VENDA V JOIN CLIENTE CLI ON V.COD_CLIENTE = CLI.COD WHERE CLI.COD = COD_C AND V.PAGO = FALSE;
	
	IF EXISTS (SELECT * FROM CLIENTE WHERE COD = COD_C) THEN
		IF EXISTS (SELECT * FROM VENDA WHERE COD = COD_V) THEN
			RETURN QUERY
			SELECT VV.venda, VV.produto, VV.quantidadde, VV.valor_unitario, VV.cliente,
				VV.valor_total, VV.dia, VV.hora, VV.funcionario
			FROM VER_VENDAS VV WHERE VV.venda = COD_V;
		ELSE
			RAISE EXCEPTION 'O CLIENTE NÃO POSSUI VENDAS EM ABERTO!';
		END IF;
	ELSE
		RAISE EXCEPTION 'CLIENTE NÃO ENCONTRADO!';
	END IF;
END
$$ 
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION GERAR_NOTA_VENDA(COD_V INT)
RETURNS TABLE(
	venda int,
	nome_produto varchar(100),
	quantidade int,
	valor_unitario numeric(8, 2),
	nome_cliente varchar(100),
	valor_total numeric(8, 2),
	dia varchar(10),
	hora varchar(10),
	nome_funcionario varchar(100)
)
AS $$
BEGIN	
		IF EXISTS (SELECT * FROM VENDA WHERE COD = COD_V) THEN
			RETURN QUERY
			SELECT VV.venda, VV.produto, VV.quantidadde, VV.valor_unitario, VV.cliente,
					VV.valor_total, VV.dia, VV.hora, VV.funcionario
			FROM VER_VENDAS VV WHERE VV.venda = COD_V;
		ELSE
			RAISE EXCEPTION 'VENDA NÃO ENCONTRADA!';
		END IF;
END
$$ 
LANGUAGE 'plpgsql';

---------------------- SERVIÇOS ------------------------

CREATE OR REPLACE FUNCTION ADD_SERVICO(NOME_TS VARCHAR(100), CPF_F VARCHAR(50), CPF_C VARCHAR(50), NOME_A VARCHAR(150))
RETURNS VOID AS $$
DECLARE 
	COD_T INT;
	VALOR_S NUMERIC(8,2);
	COD_F INT;
	COD_C INT;
	COD_A INT;
BEGIN
	SELECT COD INTO COD_T FROM TIPO_SERVICO WHERE NOME = NOME_TS;
	SELECT VALOR INTO VALOR_S FROM TIPO_SERVICO WHERE NOME = NOME_TS;
	SELECT COD INTO COD_F FROM FUNCIONARIO WHERE CPF = CPF_F;
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF = CPF_C;
	SELECT ANI.COD INTO COD_A FROM ANIMAL ANI JOIN CLIENTE CLI ON CLI.COD = ANI.COD_CLIENTE WHERE ANI.NOME = NOME_A AND CLI.CPF = CPF_C;

	
	IF EXISTS(SELECT * FROM TIPO_SERVICO WHERE COD = COD_T) THEN
		IF EXISTS (SELECT * FROM FUNCIONARIO F JOIN CARGO CAR ON CAR.COD = F.COD_CARGO WHERE F.COD = COD_F AND CAR.NOME ILIKE 'GROOMER') THEN
			IF EXISTS(SELECT * FROM CLIENTE WHERE CPF = CPF_C)THEN
				IF EXISTS (SELECT * FROM ANIMAL ANI JOIN CLIENTE CLI ON CLI.COD = ANI.COD_CLIENTE WHERE ANI.NOME = NOME_A AND CLI.CPF = CPF_C) THEN
					INSERT INTO SERVICO(COD_TIPO, COD_FUNC, COD_ANIMAL, VALOR) VALUES(COD_T, COD_F, COD_A, VALOR_S);
				ELSE
					RAISE EXCEPTION 'ANIMAL NÃO ENCONTRADO!';
				END IF;
			ELSE 
				RAISE EXCEPTION 'CLIENTE NÃO EXISTE!';
			END IF;
		ELSIF EXISTS (SELECT * FROM FUNCIONARIO F JOIN CARGO CAR ON CAR.COD = F.COD_CARGO WHERE F.COD = COD_F AND CAR.NOME != CARGO_F) THEN
			RAISE EXCEPTION 'O FUNCIONÁRIO NÃO PERTENCE AO SETOR!';
		ELSE 
			RAISE EXCEPTION 'FUNCIONÁRIO NÃO EXISTE!';
		END IF;
	ELSE
		RAISE EXCEPTION 'O SERVIÇO NÃO EXISTE!';
	END IF;
	
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION FINALIZAR_SERVICO(CPF_C VARCHAR(50))
RETURNS VOID
AS $$
DECLARE
	COD_C INT;
BEGIN
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF = CPF_C;
	
	IF EXISTS (SELECT * FROM SERVICO S
			   JOIN ANIMAL ANI ON S.COD_ANIMAL = ANI.COD
			   JOIN CLIENTE CLI ON ANI.COD_CLIENTE = CLI.COD
			   WHERE CLI.COD = COD_C AND PAGO = FALSE) THEN
			   
		UPDATE SERVICO S SET PAGO = TRUE
		FROM ANIMAL ANI
		WHERE S.COD_ANIMAL = ANI.COD AND ANI.COD_CLIENTE = COD_C AND PAGO = FALSE;
		
		RAISE INFO 'SERVIÇO FINALIZADO COM SUCESSO!';
	ELSE
		RAISE EXCEPTION 'O CLIENTE NÃO POSSUI NENHUM SERVIÇO EM ABERTO!';
	END IF;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION GERAR_NOTA_SERV_ABERTA(CPF_C VARCHAR(50))
RETURNS TABLE(
	servico int,
	tipo_servico varchar(100),
	valor_servico numeric(8, 2),
	nome_cliente varchar(100),
	dia varchar(10),
	hora varchar(10),
	nome_funcionario varchar(100)
)
AS $$
DECLARE
	COD_C INT;
	COD_S INT;
BEGIN
	SELECT COD INTO COD_C FROM CLIENTE WHERE CPF = CPF_C;
	SELECT S.COD INTO COD_S FROM SERVICO S
		JOIN ANIMAL ANI ON S.COD_ANIMAL = ANI.COD
		JOIN CLIENTE CLI ON ANI.COD_CLIENTE = CLI.COD WHERE CLI.COD = COD_C AND S.PAGO = FALSE;
	
	IF EXISTS (SELECT * FROM CLIENTE WHERE COD = COD_C) THEN
		IF EXISTS (SELECT * FROM SERVICO WHERE COD = COD_S) THEN
			RETURN QUERY
			SELECT VS.servico, VS.tipo_servico, VS.valor_servico, VS.cliente,
				VS.dia, VS.hora, VS.funcionario
			FROM VER_SERVICOS VS WHERE VS.servico = COD_S;
		ELSE
			RAISE EXCEPTION 'O CLIENTE NÃO POSSUI SERVIÇOS EM ABERTO!';
		END IF;
	ELSE
		RAISE EXCEPTION 'CLIENTE NÃO ENCONTRADO!';
	END IF;
END
$$ 
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION GERAR_NOTA_SERV(COD_S INT)
RETURNS TABLE(
	servico int,
	tipo_servico varchar(100),
	valor_servico numeric(8, 2),
	nome_cliente varchar(100),
	dia varchar(10),
	hora varchar(10),
	nome_funcionario varchar(100)
)
AS $$
BEGIN	
		IF EXISTS (SELECT * FROM SERVICO WHERE COD = COD_S) THEN
			RETURN QUERY
			SELECT VS.servico, VS.tipo_servico, VS.valor_servico, VS.cliente,
				VS.dia, VS.hora, VS.funcionario
			FROM VER_SERVICOS VS WHERE VS.servico = COD_S;
		ELSE
			RAISE EXCEPTION 'SERVIÇO NÃO ENCONTRADO!';
		END IF;
END
$$ 
LANGUAGE 'plpgsql';

---------------------- COMISSÃO E SALÁRIO ------------------------

CREATE OR REPLACE FUNCTION CALCULAR_COMISSAO(
    FUNCIONARIO_ID INT,
    DATA_INICIO DATE,
    DATA_FIM DATE
)
RETURNS NUMERIC(8,2) AS $$
DECLARE
    COMISSAO NUMERIC;
    CARGO VARCHAR(100);
	EXCEPTION_MESSAGE TEXT;
BEGIN
    SELECT CAR.NOME INTO CARGO
    FROM FUNCIONARIO FUNC JOIN CARGO CAR ON FUNC.COD_CARGO = CAR.COD
    WHERE FUNC.COD = FUNCIONARIO_ID;

    IF (CARGO ILIKE 'ATENDENTE') THEN
		COMISSAO := COALESCE(SUM(VALOR * 0.1), 0)
        FROM VENDA
        WHERE COD_FUNC = FUNCIONARIO_ID
            AND DT_HORA BETWEEN DATA_INICIO AND DATA_FIM
            AND PAGO = TRUE;
			
    ELSIF (CARGO ILIKE 'GROOMER') THEN
		COMISSAO := COALESCE(SUM(VALOR * 0.07), 0)
        FROM SERVICO
        WHERE COD_FUNC = FUNCIONARIO_ID
            AND DT_HORA BETWEEN DATA_INICIO AND DATA_FIM
            AND PAGO = TRUE;
	
	ELSIF (CARGO ILIKE 'GERENTE' OR CARGO ILIKE 'SUPERVISOR') THEN
            EXCEPTION_MESSAGE := 'ESTE CARGO NÃO POSSUI COMISSÃO!';
        ELSE
            EXCEPTION_MESSAGE := 'CARGO NÃO ENCONTRADO!';
        END IF;

    IF EXCEPTION_MESSAGE IS NOT NULL THEN
        RETURN NULL::NUMERIC(8, 2);
    ELSE
        RETURN COMISSAO;
    END IF;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION SALARIO_TOTAL(
	FUNCIONARIO_ID INT,
    DATA_INICIO DATE,
    DATA_FINAL DATE
)
RETURNS NUMERIC(8,2) AS $$
DECLARE 
	SALARIO_BASE NUMERIC;
	COMISSAO NUMERIC;
	SALARIO_TOTAL NUMERIC;
	MESES INT;
BEGIN
	SELECT SALARIO INTO SALARIO_BASE
	FROM CARGO CA JOIN FUNCIONARIO F ON CA.COD = F.COD_CARGO 
	WHERE F.COD = FUNCIONARIO_ID;
	
	SELECT extract('Month' from age(DATA_FINAL, DATA_INICIO)) INTO MESES;
	
	COMISSAO := CALCULAR_COMISSAO(FUNCIONARIO_ID, DATA_INICIO, DATA_FINAL);
	
    SALARIO_TOTAL := (SALARIO_BASE * MESES) + COMISSAO;
	
	RETURN SALARIO_TOTAL;
END;
$$
LANGUAGE 'plpgsql';

---------------------- RELATÓRIO SERVIÇOS ------------------------

CREATE OR REPLACE FUNCTION RELATORIO_SERVICO(DT_I DATE, DT_F DATE)
RETURNS TABLE(SERVICO VARCHAR(100), QNTD_TOTAL INT, VALOR_TOTAL NUMERIC(8,1), MEDIA_QTD NUMERIC(8,2), MEDIA_VALOR NUMERIC(8,2))
AS $$
DECLARE 
	DIAS INT; 
BEGIN 
	SELECT EXTRACT('DAY' FROM AGE(DT_F, DT_I)) INTO DIAS;
	
	RETURN QUERY 
	SELECT TS.NOME,(COUNT(S.COD)::INT) QNTD_TOTAL, SUM(S.VALOR) VALOR_TOTAL, (COUNT(S.COD)/DIAS)::NUMERIC(8,1) MEDIA_QTD, (SUM(S.VALOR)/DIAS)::NUMERIC(8,2) MEDIA_VALOR FROM SERVICO S
	JOIN TIPO_SERVICO TS ON S.COD_TIPO = TS.COD
	WHERE PAGO = TRUE AND DT_HORA BETWEEN DT_I AND DT_F
	GROUP BY TS.NOME;
		
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION RELATORIO_SERVICO_ANUAL(ano_param INT)
RETURNS TABLE (
    ano INT,
    mes VARCHAR(20),
    nome_servico VARCHAR(100),
    total_arrecadado NUMERIC(8,2),
    numero_vendas BIGINT
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        EXTRACT(YEAR FROM s.dt_hora)::INT AS ano,
        to_char(s.dt_hora, 'Month')::VARCHAR AS mes,
        ts.nome AS nome_servico,
        SUM(s.valor) AS total_arrecadado,
        COUNT(*)::BIGINT AS numero_vendas
    FROM
        SERVICO s
        JOIN TIPO_SERVICO ts ON s.cod_tipo = ts.cod
    WHERE
        EXTRACT(YEAR FROM s.dt_hora)::INT = ano_param
        AND s.pago = TRUE
    GROUP BY
        ano, mes, nome_servico;
END;
$$
LANGUAGE plpgsql;

---------------------- RELATÓRIO VENDAS ------------------------

CREATE OR REPLACE FUNCTION RELATORIO_VENDA(DT_I DATE, DT_F DATE)
RETURNS TABLE(PRODUTO VARCHAR(100), QTD_TOTAL INT, VALOR_TOTAL NUMERIC(8,1), MEDIA_QNTD NUMERIC(8,2), MEDIA_VALOR NUMERIC(8,2))
AS $$
DECLARE 
	DIAS INT; 
BEGIN 
	SELECT EXTRACT('DAY' FROM AGE(DT_F, DT_I)) INTO DIAS;
	
	RETURN QUERY 
		SELECT P.NOME, (SUM(IV.QNTD)::INT) QTD, SUM(IV.VALOR) VALOR_TOTAL, (SUM(IV.QNTD)/DIAS)::NUMERIC(8,1) MEDIA_QNTD, (SUM(IV.VALOR)/DIAS)::NUMERIC(8,2) MEDIA_VALOR FROM VENDA V
		JOIN ITEM_VENDA IV ON IV.COD_VENDA = V.COD
		JOIN PRODUTO P ON IV.COD_PRODUTO = P.COD
		WHERE PAGO = TRUE AND DT_HORA BETWEEN DT_I AND DT_F
		GROUP BY P.NOME;
		
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION RELATORIO_VENDA_ANUAL(ano_param INT)
RETURNS TABLE (
    ano INT,
    mes VARCHAR(20),
    nome_produto VARCHAR(100),
    total_arrecadado NUMERIC(8,2),
    quantidade_vendida BIGINT
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        EXTRACT(YEAR FROM v.dt_hora)::INT AS ano,
        to_char(v.dt_hora, 'Month')::VARCHAR AS mes,
        p.nome AS nome_produto,
        SUM(iv.valor) AS total_arrecadado,
        SUM(iv.qntd)::BIGINT AS quantidade_vendida
    FROM
        VENDA v
        JOIN ITEM_VENDA iv ON v.cod = iv.cod_venda
        JOIN PRODUTO p ON iv.cod_produto = p.cod
    WHERE
        EXTRACT(YEAR FROM v.dt_hora)::INT = ano_param
        AND v.pago = TRUE
    GROUP BY
        ano, mes, nome_produto;
END;
$$
LANGUAGE plpgsql;

----------------- RELATÓRIO ANUAL VENDAS E SERVIÇOS ------------------

CREATE OR REPLACE FUNCTION RELATORIO_VS_ANUAL(ano_param INT)
RETURNS TABLE (
    ano INT,
    mes INT,
    numero_servicos BIGINT,
    numero_vendas BIGINT
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        COALESCE(s.ano, v.ano) AS ano,
        COALESCE(s.mes, v.mes) AS mes,
        COALESCE(s.numero_servicos, 0)::BIGINT AS numero_servicos,
        COALESCE(v.numero_vendas, 0)::BIGINT AS numero_vendas
    FROM
        (SELECT
            EXTRACT(YEAR FROM s.dt_hora)::INT AS ano,
            EXTRACT(MONTH FROM s.dt_hora)::INT AS mes,
            COUNT(*) AS numero_servicos
        FROM
            SERVICO s
        WHERE
		 	EXTRACT(YEAR FROM s.dt_hora)::INT = ano_param AND
            s.pago = TRUE
        GROUP BY
            ano, mes) s
    FULL OUTER JOIN
        (SELECT
            EXTRACT(YEAR FROM v.dt_hora)::INT AS ano,
            EXTRACT(MONTH FROM v.dt_hora)::INT AS mes,
            COUNT(*) AS numero_vendas
        FROM
            VENDA v
        WHERE
		 	EXTRACT(YEAR FROM v.dt_hora)::INT = ano_param AND
            v.pago = TRUE
        GROUP BY
            ano, mes) v
    ON s.ano = v.ano AND s.mes = v.mes;
END;
$$ LANGUAGE plpgsql;


---------------------- RELATÓRIO FUNCIONÁRIOS ------------------------

CREATE OR REPLACE FUNCTION RELATORIO_FUNCIONARIO(CARGO VARCHAR(150), DT_I DATE, DT_F DATE)
RETURNS TABLE (FUNCIONARIO VARCHAR(150), CPF VARCHAR(50), QNTD INT, VALOR_TOTAL NUMERIC(8,2), MEDIA_QNTD NUMERIC(8,1), MEDIA_VALOR NUMERIC(8,1))
AS $$
DECLARE 
	DIAS INT;
BEGIN 
	SELECT EXTRACT('DAY' FROM AGE(DT_F,DT_I)) INTO DIAS;
	
	IF(CARGO = 'ATENDENTE')THEN
		RETURN QUERY
		SELECT NOME, F.CPF, (COUNT(V.COD)::INT) QNTD, SUM(VALOR) VALOR_TOTAL, ((COUNT(V.COD)/DIAS)::NUMERIC(8,1)) MEDIA_QNTD, ((SUM(VALOR)/DIAS)::NUMERIC(8,1)) MEDIA_VALOR FROM FUNCIONARIO F
		JOIN VENDA V ON F.COD = V.COD_FUNC
		WHERE PAGO = TRUE AND DT_HORA BETWEEN DT_I AND DT_F
		GROUP BY NOME, F.CPF;
	ELSEIF(CARGO = 'GROOMER')THEN
		RETURN QUERY
		SELECT F.NOME, F.CPF, (COUNT(S.COD)::INT) QNTD, SUM(S.VALOR) VALOR_TOTAL, ((COUNT(S.COD)/DIAS)::NUMERIC(8,1)) MEDIA_QNTD, ((SUM(S.VALOR)/DIAS)::NUMERIC(8,1)) MEDIA_VALOR FROM SERVICO S
		JOIN FUNCIONARIO F ON F.COD = S.COD_FUNC
		JOIN TIPO_SERVICO TS ON TS.COD = S.COD_TIPO
		WHERE PAGO = TRUE AND DT_HORA BETWEEN DT_I AND DT_F
		GROUP BY F.NOME, F.CPF;
	ELSE
		RAISE EXCEPTION 'O CARGO INFORMADO(%), NÃO PERTENCE A ESTE RELATÓRIO!', CARGO;
	END IF;

END;
$$
LANGUAGE 'plpgsql';

------------------------ RANKING DE CLIENTES --------------------------

CREATE OR REPLACE FUNCTION RANKING_CLIENTES_GERAL()
RETURNS TABLE (
    nome_cliente VARCHAR(150),
    numero_compras BIGINT,
    numero_servicos BIGINT
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        c.nome AS nome_cliente,
        COALESCE(v.num_compras, 0)::BIGINT AS numero_compras,
        COALESCE(s.num_servicos, 0)::BIGINT AS numero_servicos
    FROM
        CLIENTE c
    LEFT JOIN
        (SELECT
            COD_CLIENTE,
            COUNT(*) AS num_compras
        FROM
            VENDA
        WHERE
            PAGO = TRUE
        GROUP BY
            COD_CLIENTE) v ON c.cod = v.cod_cliente
    LEFT JOIN
        (SELECT
            a.COD_CLIENTE,
            COUNT(*) AS num_servicos
        FROM
            SERVICO s
        JOIN
            ANIMAL a ON s.COD_ANIMAL = a.COD
        WHERE
            s.PAGO = TRUE
        GROUP BY
            a.COD_CLIENTE) s ON c.cod = s.cod_cliente
    ORDER BY
        (COALESCE(v.num_compras, 0) + COALESCE(s.num_servicos, 0)) DESC;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION RANKING_CLIENTES(ano_param INT, mes_param INT)
RETURNS TABLE (
    nome_cliente VARCHAR(150),
    numero_compras BIGINT,
    numero_servicos BIGINT
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        c.nome AS nome_cliente,
        COALESCE(v.num_compras, 0)::BIGINT AS numero_compras,
        COALESCE(s.num_servicos, 0)::BIGINT AS numero_servicos
    FROM
        CLIENTE c
    LEFT JOIN
        (SELECT
            COD_CLIENTE,
            COUNT(*) AS num_compras
        FROM
            VENDA v
        WHERE
            v.PAGO = TRUE
		 	AND EXTRACT(YEAR FROM v.DT_HORA) = ano_param
            AND EXTRACT(MONTH FROM v.DT_HORA) = mes_param
        GROUP BY
            COD_CLIENTE) v ON c.cod = v.cod_cliente
    LEFT JOIN
        (SELECT
            a.COD_CLIENTE,
            COUNT(*) AS num_servicos
        FROM
            SERVICO s
        JOIN
            ANIMAL a ON s.COD_ANIMAL = a.COD
        WHERE
            s.PAGO = TRUE
		 	AND EXTRACT(YEAR FROM s.DT_HORA) = ano_param
            AND EXTRACT(MONTH FROM s.DT_HORA) = mes_param
        GROUP BY
            a.COD_CLIENTE) s ON c.cod = s.cod_cliente
    ORDER BY
        (COALESCE(v.num_compras, 0) + COALESCE(s.num_servicos, 0)) DESC;
END;
$$ LANGUAGE plpgsql;